import React from 'react';
import ReactDOM from 'react-dom';
import Remarkable from 'remarkable';
import request from 'superagent';


const CommentForm = React.createClass({
    getInitialState() {
        return {author: '', text: ''};
    },

    handleAuthorChange({target}) {
        this.setState({author: target.value});
    },

    handleTextChange({target}) {
        this.setState({text: target.value});
    },

    handleSubmit(e) {
        e.preventDefault();
        const author = this.state.author.trim();
        const text = this.state.text.trim();
        if (!text || !author) {
            return;
        }
        this.props.onCommentSubmit({
            author,
            text
        });
        this.setState({
            author: '',
            text: ''
        });
    },

    render() {
        return (
            <form className="commentForm" onSubmit={this.handleSubmit}>
              <div>
                <input
                  type="text"
                  placeholder="Your name"
                  value={this.state.author}
                  onChange={this.handleAuthorChange}
                  />
              </div>
              <div>
                <textarea
                  type="text"
                  placeholder="Say something..."
                  value={this.state.text}
                  onChange={this.handleTextChange}
                  />
              </div>
              <input type="submit" value="Post" />
            </form>
        );
    }
});

const Comment = React.createClass({
    rawMarkup() {
        const md = new Remarkable();
        const rawMarkup = md.render(this.props.children.toString());
        return { __html: rawMarkup };
    },

    render() {
        return (
                <div className="comment">
                  <h2 className="commentAuthor">{this.props.author}</h2>
                  <span dangerouslySetInnerHTML={this.rawMarkup()} />
                </div>
        );
    }
});

const CommentBox = React.createClass({
    loadCommentsFromServer() {
        request.get(this.props.url)
            .end((err, {ok, text}) => {
                if(err || !ok){
                    console.error(err.toString());
                } else {
                    this.setState({data: JSON.parse(text).reverse()});
                }
            });
    },

    handleCommentSubmit(comment) {
        const comments = this.state.data;
        // Optimistically set an id on the new comment. It will be replaced by an
        // id generated by the server.
        comment.id = Math.random().toString(36).replace(/[^a-zA-Z0-9]+/g, '');

        const newComments = comments.concat([comment]);
        this.setState({data: newComments});

        // console.log(comment.text);
        // console.log(comment.author);
        request
            .post(this.props.postUrl)
            .send({
                text: comment.text,
                author: comment.author
            })
            .end((err, {ok, text}) => {
                if (err || !ok) {
                    console.error(this.props.url, err.toString());
                } else {
                    this.setState({data: JSON.parse(text)});
                }
            });
    },

    getInitialState() {
        return {data: []};
    },

    componentDidMount() {
        this.loadCommentsFromServer();
        setInterval(this.loadCommentsFromServer, this.props.pollInterval);
    },

    render() {
        return (
                <div className="commentBox">
                <h1>Comments</h1>
                <CommentForm onCommentSubmit={this.handleCommentSubmit} />
                <CommentList data={this.state.data} />
                </div>
        );
    }

});

const CommentList = React.createClass({
    render() {
        const commentNodes = this.props.data.map(({author, id, text}) => <Comment author={author} key={id}>
          {text}
        </Comment>);

        return (
            <div className="commentList">
              {commentNodes}
            </div>
        );

    }
});

export {CommentBox};

ReactDOM.render(
    <CommentBox url="/api/comments" postUrl="/api/comment" pollInterval={2000}/>,
    document.getElementById('content')
);