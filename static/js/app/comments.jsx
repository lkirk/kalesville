import React from 'react';
import ReactDOM from 'react-dom';
import Remarkable from 'remarkable';
import request from 'superagent';


class CommentForm extends React.Component {
    constructor(props) {
	super(props);
	this.state = {author: '', text: ''};
    }

    handleAuthorChange(e) {
	this.setState({author: e.target.value});
    }

    handleTextChange(e) {
	this.setState({text: e.target.value});
    }

    handleSubmit(e) {
	e.preventDefault();
	const author = this.state.author.trim();
	const text = this.state.text.trim();
	if (!text || !author) {
	    return;
	}
	this.props.onCommentSubmit({author, text});
	this.setState({author: '', text: ''});
    }

    render() {
	return (
	    <form className="commentForm" onSubmit={this.handleSubmit.bind(this)}>
	      <div>
		<input
	          type="text"
	          placeholder="Your name"
	          value={this.state.author}
	          onChange={this.handleAuthorChange.bind(this)}
		  />
	      </div>
	      <div>
		<textarea
	          type="text"
	          placeholder="Say something..."
	          value={this.state.text}
	          onChange={this.handleTextChange.bind(this)}
		  />
	      </div>
	      <input type="submit" value="Post" />
	    </form>
	);
    }
};

class Comment extends React.Component {
    rawMarkup() {
	const md = new Remarkable();
	const rawMarkup = md.render(this.props.children.toString());
	return { __html: rawMarkup };
    }

    render() {
	return (
	        <div className="comment">
		  <h2 className="commentAuthor">{this.props.author}</h2>
		  <span dangerouslySetInnerHTML={this.rawMarkup()} />
		</div>
	);
    }
};

class CommentBox extends React.Component {
    constructor(props) {
	super(props);
	this.state = {data: []};
    }

    loadCommentsFromServer() {
	request.get(this.props.url)
	    .end((err, res) => {
		if(err || !res.ok){
		    console.error(err.toString());
		} else {
		    this.setState({data: JSON.parse(res.text)});
		}
	    });
    }

    handleCommentSubmit(comment) {
	const comments = this.state.data;
	// Optimistically set an id on the new comment. It will be replaced by an
	// id generated by the server.
	comment.id = Math.random().toString(36).replace(/[^a-zA-Z0-9]+/g, '');

	const newComments = comments.concat([comment]);
	this.setState({data: newComments});

	// console.log(comment.text);
	// console.log(comment.author);
	request
	.post(this.props.postUrl)
	.send({
	    text: comment.text,
	    author: comment.author
	})
	.end((err, res) => {
	    if (err || !res.ok) {
		console.error(this.props.url, err.toString());
	    } else {
		this.setState([{data: JSON.parse(res.text)}]);
	    }
	});
    }

    componentDidMount() {
	this.loadCommentsFromServer();
	// setInterval(this.loadCommentsFromServer, this.props.pollInterval);
	setInterval(this.loadCommentsFromServer.bind(this), this.props.pollInterval);

    }

    render() {
	return (
	    <div className="commentBox">
	    <h1>Comments</h1>
	    <CommentForm onCommentSubmit={this.handleCommentSubmit.bind(this)} />
	    <CommentList data={this.state.data} />
	    </div>
	);
    }

};

class CommentList extends React.Component {
    render() {
	// console.log(this.props.data);
	const commentNodes = this.props.data.map(comment => <Comment author={comment.author} key={comment.id}>
	{comment.text}
	    </Comment>);

	return (
	    <div className="commentList">
	    {commentNodes}
	    </div>
	);

    }
};

export {CommentBox};

ReactDOM.render(
    <CommentBox url="/api/comments" postUrl="/api/comment" pollInterval={2000}/>,
    document.getElementById('content')
);
