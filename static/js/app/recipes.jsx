var React = require('react');
var ReactDOM = require('react-dom');
var Remarkable = require('remarkable');
var request = require('superagent');


var RecipeForm = React.createClass({
    getInitialState: function() {
	return {ingredients: '', procedures: ''};
    },

    handleTitleChange: function() {
	this.setState({title: e.target.value});
    },

    handleIngredientsChange: function() {
	this.setState({ingredients: e.target.value});
    },

    handleProceduresChange: function() {
	this.setState({procedures: e.target.value});
    },

    handleSubmit: function(e) {
	e.preventDefault();
	var title = this.state.title.trim();
	var ingredients = this.state.ingredients.trim();
	var procedures = this.state.procedures.trim();
	if (!text || !author) {
	    return;
	}
	this.props.onRecipeSubmit({
	    title: title,
	    ingredients: ingredients,
	    procedures: procedures
	});
	this.setState({
	    title: '',
	    ingredients: '',
	    procedures: ''
	});
    },

    render: function() {
	return (
	    <form className="recipeForm" onSubmit={this.handleSubmit}>
	      <div>
		<input
	          type="text"
	          placeholder="Recipe Title"
	          value={this.state.recipe}
	          onChange={this.handleTitleChange}
		  />
	      </div>
	      <div>
		<textarea
		  type="text"
		  placeholder="Enter ingredients here. Markdown is completely valid, see here: "
		  value={this.state.ingredients}
		  onChange={this.handleIngredientsChange}
		  />
	      </div>
	      <div>
		<textarea
		  type="text"
		  placeholder="Enter a procedure list here. Markdown is completely valid here too!"
		  onChange={this.handleProceduresChange}
		  />
	      </div>
	      <input type="submit" value="Post"/>
	    </form>
	);
    }
});


var RecipeDisplay = React.createClass({
    loadRecipesFromServer: function() {
	request.get(this.props.url)
	    .end(function(err,res){
		if(err || !res.ok){
		    console.error(err.toString());
		} else {
		    this.setState({data: JSON.parse(res.text)});
		}
	    }.bind(this));
    },

    handleRecipeSubmit: function(recipe) {
	var recipes = this.state.data.reverse();
	// Optimistically set an id on the new comment. It will be replaced by an
	// id generated by the server.
	recipe.id = Math.random().toString(36).replace(/[^a-zA-Z0-9]+/g, '');
	var newRecipes = recipes.concat([recipe]);
	this.setState({data: newRecipes});

	// console.log(comment.text);
	// console.log(comment.author);
	request
	    .post(this.props.postUrl)
	    .send({
		title: recipe.text,
		ingredients: recipe.ingredients,
		procedures: recipe.procedures
	    })
	    .end(function(err, res){
		if (err || !res.ok) {
		    console.error(this.props.url, err.toString());
		} else {
		    this.setState({data: JSON.parse(res.text)});
		}
	    }.bind(this));
    },

    getInitialState: function() {
	return {data: []};
    },

    componentDidMount: function() {
	this.loadRecipesFromServer();
	setInterval(this.loadRecipesFromServer, this.props.pollInterval);
    },

    render: function() {
	return (
	        <div className="recipeDisplay">
		<h1>Recipes</h1>
		<RecipeForm onRecipeSubmit={this.handleRecipeSubmit} />
		<Recipe data={this.state.data.reverse()} />
		</div>
	);
    }

});

var Recipe = React.createClass({
    rawMarkup: function() {
	var md = new Remarkable();
	var rawMarkup = md.render(this.props.children.toString());
	return { __html: rawMarkup };
    },

    render: function() {
	return (
	    <div className="recipe">
	      <h2 className="recipeTitle">{this.props.title}</h2>
	      <span dangerouslySetInnterHTML={this.rawMarkup()}/>
	    </div>
	);
    }
});

ReactDOM.render(
    <RecipeForm/>,
    <Recipe/>,
    document.getElementById('content')
);